import csv
import sys
from pprint import pprint
from datetime import datetime
from openai 

file = sys.argv[1]

def read_csv_to_dicts(file):
    """
    Reads a CSV file and returns a list of dictionaries.
    Each dictionary represents a row from the file, with keys corresponding to the column headers.
    
    :param filename: The path to the CSV file to be read.
    :return: A list of dictionaries, where each dictionary represents a row from the CSV file.
    """
    data = []  
    with open(file, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:    
            data.append(row)
    return data

rows_as_dicts = read_csv_to_dicts(file)

pprint(rows_as_dicts[1])


def clean_dict_values(row_dict):
    """
    Clean the values in the dictionary.
    """
    for key, value in row_dict.items():
        # Remove currency symbol and convert to float, if applicable
        if key in ['Balance', 'Paid out'] and value.startswith('�'):
           row_dict[key] = float(value.replace('�', ''))
         # Use the convert_date_format function for the 'Date' key
        elif key == 'Date' and value:
            row_dict[key] = convert_date_format(value)
    return row_dict

def convert_date_format(date_string):
    """
    Converts a date from '12 Feb 2024' format to 'dd.mm.yyyy' format.
    
    :param date_string: The date string to convert.
    :return: The converted date string in 'dd.mm.yyyy' format.
    """
    try:
        # Parse the date using strptime
        date_obj = datetime.strptime(date_string, '%d %b %Y')
        # Format the date using strftime to the new format
        return date_obj.strftime('%d.%m.%Y')
    except ValueError:
        # Return the original date_string if there's a parsing error
        print(f"Error parsing date: {date_string}")
        return date_string

def add_new_key_value_with_openai(dictionary, key, prompt, openai_api_key):
    """
    Adds a new key-value pair to the given dictionary. The value is generated by OpenAI based on the provided prompt.
    
    :param dictionary: The dictionary to add the new key-value pair to.
    :param key: The key for the new dictionary entry.
    :param prompt: The prompt to send to OpenAI for generating the value.
    :param openai_api_key: Your OpenAI API key.
    :return: None
    """
    # Set the OpenAI API key
    openai.api_key = openai_api_key
    
    try:
        # Generate a response from OpenAI
        response = openai.Completion.create(
          engine="text-davinci-003",  # Or another model version
          prompt=prompt,
          max_tokens=50  # Adjust based on your needs
        )
        
        # Extract the text from the response and add it to the dictionary
        generated_text = response.choices[0].text.strip()
        dictionary[key] = generated_text
    except Exception as e:
        print(f"An error occurred: {e}")

    
    
# Clean a specific row from the CSV
clean_dict = clean_dict_values(rows_as_dicts[1])
pprint(clean_dict)